@page "/DeleteClientes"
@page "/DeleteClientes/{ClienteId:int}"
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<PageTitle>Eliminar Cliente</PageTitle>

<div class="card shadow">
    <div class="card-header">
        <h3>Eliminar Cliente</h3>
    </div>
    <div class="card-header">
        <h3 class="text-danger">¿Est&aacute;s seguro de que quieres eliminar el cliente?</h3>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="row">
                <p>-Cliente ID: @cliente.ClienteId</p>
                <p>-Nombres: @cliente.Nombres</p>
                <p>-Email: @cliente.Email</p>
                <p>-RNC: @cliente.Rnc</p>
                <p>-Direcci&oacute;n: @cliente.Direccion</p>
                <p>-Tel&eacute;fono: @cliente.Telefono</p>
                <p>-Celular: @cliente.Celular</p>
            </div>

        </div>
    </div>
    <div class="card-footer">
        <a href="/IndexClientes" class="btn btn-secondary bi bi-arrow-left-square-fill ms-auto">Volver</a>
        <button type="button" class="btn btn-danger bi bi-trash-fill" @onclick="Eliminar">Eliminar</button>
    </div>
</div>

@code {

    [Parameter]
    public int ClienteId { get; set; }
    public Clientes cliente { get; set; } = new Clientes();

    protected override async Task OnInitializedAsync()
    {
        if (ClienteId > 0)
        {
            var clienteEncontrado = await httpClient.GetFromJsonAsync<Clientes>($"api/Clientes/{ClienteId}");
            if (clienteEncontrado != null)
            {
                cliente = clienteEncontrado;
            }
        }
    }

    public async Task Eliminar()
    {
        var eliminado = await httpClient.DeleteAsync($"api/Clientes/{cliente.ClienteId}");
        if (eliminado.IsSuccessStatusCode)
        {
            cliente = new Clientes();
        }

        navigationManager.NavigateTo("/IndexClientes");
    }
}
