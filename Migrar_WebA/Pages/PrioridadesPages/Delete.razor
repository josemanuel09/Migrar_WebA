@page "/DeletePrioridades"
@page "/DeletePrioridades/{PrioridadId:int}"
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<PageTitle>Eliminar Prioridad</PageTitle>

<div class="card shadow">
    <div class="card-header">
        <h3>Eliminar Prioridad</h3>
    </div>
    <div class="card-header">
        <h3 class="text-danger">¿Est&aacute;s seguro de que quieres eliminar la prioridad?</h3>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="row">
                <p>-Prioridad ID: @prioridad.PrioridadId</p>
                <p>-Descripci&oacute;n: @prioridad.Descripcion</p>
                <p>-D&iacute;as Compromiso: @prioridad.DiasCompromiso</p>
            </div>
        </div>
    </div>
    <div class="card-footer">
        <a href="/Index" class="btn btn-secondary bi bi-arrow-left-square-fill ms-auto">Volver</a>
        <button type="button" class="btn btn-danger bi bi-trash-fill" @onclick="Eliminar">Eliminar</button>
    </div>
</div>

@code {

    [Parameter]
    public int PrioridadId { get; set; }
    public Prioridades prioridad { get; set; } = new Prioridades();

    protected override async Task OnInitializedAsync()
    {
        if (PrioridadId > 0)
        {
            var prioridadEncontrada = await httpClient.GetFromJsonAsync<Prioridades>($"api/Prioridades/{PrioridadId}");
            if (prioridadEncontrada != null)
            {
                prioridad = prioridadEncontrada;
            }
        }
    }

    public async Task Eliminar()
    {
        var eliminado = await httpClient.DeleteAsync($"api/Prioridades/{prioridad.PrioridadId}");
        if (eliminado.IsSuccessStatusCode)
        {
            prioridad = new Prioridades();
        }

        navigationManager.NavigateTo("/Index");
    }
}
